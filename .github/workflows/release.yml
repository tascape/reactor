#
# Copyright (c) 2015 - present Nebula Bay.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Release to Maven Central

on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        description: "Next version bump type"
        options:
          - patch
          - minor
          - major
        default: patch

jobs:
  release:
    name: Release from master
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven
          server-id: central
          server-username: CENTRAL_TOKEN_USERNAME
          server-password: CENTRAL_TOKEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Debug GPG import
        run: |
          echo "Checking imported secret keys..."
          gpg --list-secret-keys --keyid-format LONG
          echo
          echo "Checking public keys..."
          gpg --list-keys --keyid-format LONG
          echo
          echo "Testing signing with loopback mode..."
          echo "test" > test.txt
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -s test.txt || echo "‚ùå Signing failed"

      - name: Show Maven settings.xml (sanitized)
        run: |
          echo "Sanitized Maven settings.xml content:"
          sed -e 's|<password>.*</password>|<password>***</password>|g' \
              -e 's|<username>.*</username>|<username>***</username>|g' \
              ~/.m2/settings.xml


      - name: Get current version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Compute release version
        id: compute_release
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          RELEASE_VERSION=${VERSION%-SNAPSHOT}
          echo "Release version: $RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Set release version
        run: |
          mvn versions:set -DnewVersion=${{ steps.compute_release.outputs.release_version }}
          mvn versions:commit

      - name: Deploy to Maven Central
        run: mvn --batch-mode clean deploy -P release -DskipTests

      - name: Commit and tag release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml */pom.xml || true
          git commit -m "Release version ${{ steps.compute_release.outputs.release_version }}" || echo "No changes"
          git tag v${{ steps.compute_release.outputs.release_version }}
          git push origin master --tags

      - name: Bump to next snapshot version
        id: bump_version
        run: |
          RELEASE=${{ steps.compute_release.outputs.release_version }}
          MAJOR=$(echo $RELEASE | cut -d. -f1)
          MINOR=$(echo $RELEASE | cut -d. -f2)
          PATCH=$(echo $RELEASE | cut -d. -f3)

          BUMP_TYPE=${{ github.event.inputs.bump }}

          if [ "$BUMP_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}-SNAPSHOT"
          echo "Next development version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

          mvn versions:set -DnewVersion=$NEXT_VERSION
          mvn versions:commit

      - name: Commit next snapshot version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add pom.xml */pom.xml || true
          git commit -m "Advance to ${{ steps.bump_version.outputs.next_version }}" || echo "No changes"
          git push origin master